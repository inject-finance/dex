/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue
} from './common'

export interface DexPoolInterface extends utils.Interface {
  functions: {
    'MAX_FEE_PERCENT()': FunctionFragment
    'addLiquidity(address)': FunctionFragment
    'allowance(address,address)': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'decimals()': FunctionFragment
    'decreaseAllowance(address,uint256)': FunctionFragment
    'fees()': FunctionFragment
    'getIncorrectTokenDeposit(address,address)': FunctionFragment
    'getLatestReserves()': FunctionFragment
    'getReserves(address)': FunctionFragment
    'getTokenPairRatio(address,uint256)': FunctionFragment
    'getTokensOutAmount(address,uint256)': FunctionFragment
    'increaseAllowance(address,uint256)': FunctionFragment
    'initialize(address,address,uint256)': FunctionFragment
    'initialized()': FunctionFragment
    'name()': FunctionFragment
    'owner()': FunctionFragment
    'pause()': FunctionFragment
    'paused()': FunctionFragment
    'removeLiquidity(address)': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'setLiquidityPoolFees(uint256)': FunctionFragment
    'swap(uint256,address,address)': FunctionFragment
    'symbol()': FunctionFragment
    'token0()': FunctionFragment
    'token1()': FunctionFragment
    'totalSupply()': FunctionFragment
    'transfer(address,uint256)': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'unpause()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'MAX_FEE_PERCENT'
      | 'addLiquidity'
      | 'allowance'
      | 'approve'
      | 'balanceOf'
      | 'decimals'
      | 'decreaseAllowance'
      | 'fees'
      | 'getIncorrectTokenDeposit'
      | 'getLatestReserves'
      | 'getReserves'
      | 'getTokenPairRatio'
      | 'getTokensOutAmount'
      | 'increaseAllowance'
      | 'initialize'
      | 'initialized'
      | 'name'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'removeLiquidity'
      | 'renounceOwnership'
      | 'setLiquidityPoolFees'
      | 'swap'
      | 'symbol'
      | 'token0'
      | 'token1'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'unpause'
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'MAX_FEE_PERCENT',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'addLiquidity',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'allowance',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'balanceOf',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'fees', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'getIncorrectTokenDeposit',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'getLatestReserves',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getReserves',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'getTokenPairRatio',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'getTokensOutAmount',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'initialized',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'removeLiquidity',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'setLiquidityPoolFees',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'swap',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(functionFragment: 'token0', values?: undefined): string
  encodeFunctionData(functionFragment: 'token1', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string

  decodeFunctionResult(
    functionFragment: 'MAX_FEE_PERCENT',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'addLiquidity',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'fees', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getIncorrectTokenDeposit',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getLatestReserves',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getReserves', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getTokenPairRatio',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getTokensOutAmount',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'increaseAllowance',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialized', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'removeLiquidity',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setLiquidityPoolFees',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'swap', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'token0', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'token1', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result

  events: {
    'Approval(address,address,uint256)': EventFragment
    'LogAddLiquidity(uint256,uint256,uint256,address,uint256,uint256)': EventFragment
    'LogGetIncorrectTokenDeposit(address,address)': EventFragment
    'LogSetNewFees(uint256,address)': EventFragment
    'LogSwapTokens(address,uint256,address,address,uint256,uint256,uint256)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'Paused(address)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
    'Unpaused(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogAddLiquidity'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogGetIncorrectTokenDeposit'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogSetNewFees'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogSwapTokens'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
}

export interface ApprovalEventObject {
  owner: string
  spender: string
  value: BigNumber
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>

export interface LogAddLiquidityEventObject {
  _amount0: BigNumber
  _amount1: BigNumber
  _shares: BigNumber
  _sender: string
  _reserve0: BigNumber
  _reserve1: BigNumber
}
export type LogAddLiquidityEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber],
  LogAddLiquidityEventObject
>

export type LogAddLiquidityEventFilter = TypedEventFilter<LogAddLiquidityEvent>

export interface LogGetIncorrectTokenDepositEventObject {
  _token: string
  _receiver: string
}
export type LogGetIncorrectTokenDepositEvent = TypedEvent<
  [string, string],
  LogGetIncorrectTokenDepositEventObject
>

export type LogGetIncorrectTokenDepositEventFilter =
  TypedEventFilter<LogGetIncorrectTokenDepositEvent>

export interface LogSetNewFeesEventObject {
  _newFees: BigNumber
  _sender: string
}
export type LogSetNewFeesEvent = TypedEvent<
  [BigNumber, string],
  LogSetNewFeesEventObject
>

export type LogSetNewFeesEventFilter = TypedEventFilter<LogSetNewFeesEvent>

export interface LogSwapTokensEventObject {
  _trader: string
  fees: BigNumber
  _tokenIn: string
  _tokenOut: string
  amountOut: BigNumber
  _newReserve0: BigNumber
  _newReserve1: BigNumber
}
export type LogSwapTokensEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber, BigNumber, BigNumber],
  LogSwapTokensEventObject
>

export type LogSwapTokensEventFilter = TypedEventFilter<LogSwapTokensEvent>

export interface OwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>

export interface PausedEventObject {
  account: string
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>

export type PausedEventFilter = TypedEventFilter<PausedEvent>

export interface TransferEventObject {
  from: string
  to: string
  value: BigNumber
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>

export type TransferEventFilter = TypedEventFilter<TransferEvent>

export interface UnpausedEventObject {
  account: string
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>

export interface DexPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: DexPoolInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    MAX_FEE_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>

    addLiquidity(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    decimals(overrides?: CallOverrides): Promise<[number]>

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    fees(overrides?: CallOverrides): Promise<[BigNumber]>

    getIncorrectTokenDeposit(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    getLatestReserves(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _reserve0: BigNumber
        _reserve1: BigNumber
        _blockTimestampLast: BigNumber
      }
    >

    getReserves(
      _tokenIn: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        tokenIn: string
        tokenOut: string
        reserveIn: BigNumber
        reserveOut: BigNumber
      }
    >

    getTokenPairRatio(
      _tokenIn: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenOut: BigNumber }>

    getTokensOutAmount(
      _tokenIn: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    initialize(
      _token0: PromiseOrValue<string>,
      _token1: PromiseOrValue<string>,
      _fees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    initialized(overrides?: CallOverrides): Promise<[boolean]>

    name(overrides?: CallOverrides): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    removeLiquidity(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setLiquidityPoolFees(
      _newFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    swap(
      _amountOut: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _tokenIn: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    symbol(overrides?: CallOverrides): Promise<[string]>

    token0(overrides?: CallOverrides): Promise<[string]>

    token1(overrides?: CallOverrides): Promise<[string]>

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  MAX_FEE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>

  addLiquidity(
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  decimals(overrides?: CallOverrides): Promise<number>

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  fees(overrides?: CallOverrides): Promise<BigNumber>

  getIncorrectTokenDeposit(
    _token: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  getLatestReserves(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      _reserve0: BigNumber
      _reserve1: BigNumber
      _blockTimestampLast: BigNumber
    }
  >

  getReserves(
    _tokenIn: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber] & {
      tokenIn: string
      tokenOut: string
      reserveIn: BigNumber
      reserveOut: BigNumber
    }
  >

  getTokenPairRatio(
    _tokenIn: PromiseOrValue<string>,
    _amountIn: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getTokensOutAmount(
    _tokenIn: PromiseOrValue<string>,
    _amountIn: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  initialize(
    _token0: PromiseOrValue<string>,
    _token1: PromiseOrValue<string>,
    _fees: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  initialized(overrides?: CallOverrides): Promise<boolean>

  name(overrides?: CallOverrides): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  paused(overrides?: CallOverrides): Promise<boolean>

  removeLiquidity(
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setLiquidityPoolFees(
    _newFees: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  swap(
    _amountOut: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    _tokenIn: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  symbol(overrides?: CallOverrides): Promise<string>

  token0(overrides?: CallOverrides): Promise<string>

  token1(overrides?: CallOverrides): Promise<string>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    MAX_FEE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>

    addLiquidity(
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<number>

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>

    fees(overrides?: CallOverrides): Promise<BigNumber>

    getIncorrectTokenDeposit(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    getLatestReserves(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _reserve0: BigNumber
        _reserve1: BigNumber
        _blockTimestampLast: BigNumber
      }
    >

    getReserves(
      _tokenIn: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        tokenIn: string
        tokenOut: string
        reserveIn: BigNumber
        reserveOut: BigNumber
      }
    >

    getTokenPairRatio(
      _tokenIn: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getTokensOutAmount(
      _tokenIn: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>

    initialize(
      _token0: PromiseOrValue<string>,
      _token1: PromiseOrValue<string>,
      _fees: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    initialized(overrides?: CallOverrides): Promise<boolean>

    name(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    pause(overrides?: CallOverrides): Promise<boolean>

    paused(overrides?: CallOverrides): Promise<boolean>

    removeLiquidity(
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    setLiquidityPoolFees(
      _newFees: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    swap(
      _amountOut: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _tokenIn: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    symbol(overrides?: CallOverrides): Promise<string>

    token0(overrides?: CallOverrides): Promise<string>

    token1(overrides?: CallOverrides): Promise<string>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    unpause(overrides?: CallOverrides): Promise<boolean>
  }

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter

    'LogAddLiquidity(uint256,uint256,uint256,address,uint256,uint256)'(
      _amount0?: null,
      _amount1?: null,
      _shares?: null,
      _sender?: null,
      _reserve0?: null,
      _reserve1?: null
    ): LogAddLiquidityEventFilter
    LogAddLiquidity(
      _amount0?: null,
      _amount1?: null,
      _shares?: null,
      _sender?: null,
      _reserve0?: null,
      _reserve1?: null
    ): LogAddLiquidityEventFilter

    'LogGetIncorrectTokenDeposit(address,address)'(
      _token?: null,
      _receiver?: null
    ): LogGetIncorrectTokenDepositEventFilter
    LogGetIncorrectTokenDeposit(
      _token?: null,
      _receiver?: null
    ): LogGetIncorrectTokenDepositEventFilter

    'LogSetNewFees(uint256,address)'(
      _newFees?: null,
      _sender?: null
    ): LogSetNewFeesEventFilter
    LogSetNewFees(_newFees?: null, _sender?: null): LogSetNewFeesEventFilter

    'LogSwapTokens(address,uint256,address,address,uint256,uint256,uint256)'(
      _trader?: null,
      fees?: null,
      _tokenIn?: null,
      _tokenOut?: null,
      amountOut?: null,
      _newReserve0?: null,
      _newReserve1?: null
    ): LogSwapTokensEventFilter
    LogSwapTokens(
      _trader?: null,
      fees?: null,
      _tokenIn?: null,
      _tokenOut?: null,
      amountOut?: null,
      _newReserve0?: null,
      _newReserve1?: null
    ): LogSwapTokensEventFilter

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter

    'Paused(address)'(account?: null): PausedEventFilter
    Paused(account?: null): PausedEventFilter

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter

    'Unpaused(address)'(account?: null): UnpausedEventFilter
    Unpaused(account?: null): UnpausedEventFilter
  }

  estimateGas: {
    MAX_FEE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>

    addLiquidity(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<BigNumber>

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    fees(overrides?: CallOverrides): Promise<BigNumber>

    getIncorrectTokenDeposit(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    getLatestReserves(overrides?: CallOverrides): Promise<BigNumber>

    getReserves(
      _tokenIn: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getTokenPairRatio(
      _tokenIn: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getTokensOutAmount(
      _tokenIn: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    initialize(
      _token0: PromiseOrValue<string>,
      _token1: PromiseOrValue<string>,
      _fees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    initialized(overrides?: CallOverrides): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    removeLiquidity(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setLiquidityPoolFees(
      _newFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    swap(
      _amountOut: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _tokenIn: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    token0(overrides?: CallOverrides): Promise<BigNumber>

    token1(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    MAX_FEE_PERCENT(overrides?: CallOverrides): Promise<PopulatedTransaction>

    addLiquidity(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    fees(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getIncorrectTokenDeposit(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    getLatestReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getReserves(
      _tokenIn: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getTokenPairRatio(
      _tokenIn: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getTokensOutAmount(
      _tokenIn: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    initialize(
      _token0: PromiseOrValue<string>,
      _token1: PromiseOrValue<string>,
      _fees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    removeLiquidity(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setLiquidityPoolFees(
      _newFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    swap(
      _amountOut: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _tokenIn: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
