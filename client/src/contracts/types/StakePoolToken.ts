/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue
} from './common'

export interface StakePoolTokenInterface extends utils.Interface {
  functions: {
    'addStakingPoolReserves(uint256,address)': FunctionFragment
    'addressStaked(address)': FunctionFragment
    'claimRewards(address)': FunctionFragment
    'factor()': FunctionFragment
    'getTotalRewards(address,address)': FunctionFragment
    'injectToken()': FunctionFragment
    'maxDuration()': FunctionFragment
    'month()': FunctionFragment
    'owner()': FunctionFragment
    'pause()': FunctionFragment
    'paused()': FunctionFragment
    'poolInfo(address)': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'setMaxDuration(uint256)': FunctionFragment
    'setStakingPool(address,uint256,uint256,uint256,uint256)': FunctionFragment
    'stakeInfo(address,address)': FunctionFragment
    'stakeToken(uint256,address,uint256)': FunctionFragment
    'stakingPoolExists(address)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'turnOnOffPool(address,bool)': FunctionFragment
    'unpause()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'addStakingPoolReserves'
      | 'addressStaked'
      | 'claimRewards'
      | 'factor'
      | 'getTotalRewards'
      | 'injectToken'
      | 'maxDuration'
      | 'month'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'poolInfo'
      | 'renounceOwnership'
      | 'setMaxDuration'
      | 'setStakingPool'
      | 'stakeInfo'
      | 'stakeToken'
      | 'stakingPoolExists'
      | 'transferOwnership'
      | 'turnOnOffPool'
      | 'unpause'
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'addStakingPoolReserves',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'addressStaked',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'claimRewards',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'factor', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'getTotalRewards',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'injectToken',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'maxDuration',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'month', values?: undefined): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'poolInfo',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'setMaxDuration',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'setStakingPool',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'stakeInfo',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'stakeToken',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'stakingPoolExists',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'turnOnOffPool',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string

  decodeFunctionResult(
    functionFragment: 'addStakingPoolReserves',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'addressStaked',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'claimRewards',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'factor', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getTotalRewards',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'injectToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'maxDuration', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'month', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'poolInfo', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setMaxDuration',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setStakingPool',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'stakeInfo', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'stakeToken', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'stakingPoolExists',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'turnOnOffPool',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result

  events: {
    'LogClaimRewards(address,uint256,address)': EventFragment
    'LogStakeToken(address,uint256,address)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'Paused(address)': EventFragment
    'Unpaused(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'LogClaimRewards'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogStakeToken'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
}

export interface LogClaimRewardsEventObject {
  _from: string
  _tokensClaimed: BigNumber
  _poolAddress: string
}
export type LogClaimRewardsEvent = TypedEvent<
  [string, BigNumber, string],
  LogClaimRewardsEventObject
>

export type LogClaimRewardsEventFilter = TypedEventFilter<LogClaimRewardsEvent>

export interface LogStakeTokenEventObject {
  _from: string
  _amountStaked: BigNumber
  _poolAddress: string
}
export type LogStakeTokenEvent = TypedEvent<
  [string, BigNumber, string],
  LogStakeTokenEventObject
>

export type LogStakeTokenEventFilter = TypedEventFilter<LogStakeTokenEvent>

export interface OwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>

export interface PausedEventObject {
  account: string
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>

export type PausedEventFilter = TypedEventFilter<PausedEvent>

export interface UnpausedEventObject {
  account: string
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>

export interface StakePoolToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: StakePoolTokenInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    addStakingPoolReserves(
      _amount: PromiseOrValue<BigNumberish>,
      _stakingPoolAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    addressStaked(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    claimRewards(
      _poolAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    factor(overrides?: CallOverrides): Promise<[BigNumber]>

    getTotalRewards(
      _poolAddress: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalRewards: BigNumber }>

    injectToken(overrides?: CallOverrides): Promise<[string]>

    maxDuration(overrides?: CallOverrides): Promise<[BigNumber]>

    month(overrides?: CallOverrides): Promise<[BigNumber]>

    owner(overrides?: CallOverrides): Promise<[string]>

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    poolInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, BigNumber, BigNumber, BigNumber] & {
        interestRate: BigNumber
        totalStakers: BigNumber
        isActive: boolean
        poolReserves: BigNumber
        minReserve: BigNumber
        minStakeAmount: BigNumber
      }
    >

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setMaxDuration(
      _maxDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setStakingPool(
      _poolAddress: PromiseOrValue<string>,
      _interesRate: PromiseOrValue<BigNumberish>,
      _initialDeposit: PromiseOrValue<BigNumberish>,
      _minReserve: PromiseOrValue<BigNumberish>,
      _minStakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    stakeInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        start: BigNumber
        end: BigNumber
        duration: BigNumber
        stakeAmount: BigNumber
        totalSupply: BigNumber
        totalClaimed: BigNumber
      }
    >

    stakeToken(
      _stakeAmount: PromiseOrValue<BigNumberish>,
      _poolAddress: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    stakingPoolExists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    turnOnOffPool(
      _poolAddress: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  addStakingPoolReserves(
    _amount: PromiseOrValue<BigNumberish>,
    _stakingPoolAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  addressStaked(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>

  claimRewards(
    _poolAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  factor(overrides?: CallOverrides): Promise<BigNumber>

  getTotalRewards(
    _poolAddress: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  injectToken(overrides?: CallOverrides): Promise<string>

  maxDuration(overrides?: CallOverrides): Promise<BigNumber>

  month(overrides?: CallOverrides): Promise<BigNumber>

  owner(overrides?: CallOverrides): Promise<string>

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  paused(overrides?: CallOverrides): Promise<boolean>

  poolInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean, BigNumber, BigNumber, BigNumber] & {
      interestRate: BigNumber
      totalStakers: BigNumber
      isActive: boolean
      poolReserves: BigNumber
      minReserve: BigNumber
      minStakeAmount: BigNumber
    }
  >

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setMaxDuration(
    _maxDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setStakingPool(
    _poolAddress: PromiseOrValue<string>,
    _interesRate: PromiseOrValue<BigNumberish>,
    _initialDeposit: PromiseOrValue<BigNumberish>,
    _minReserve: PromiseOrValue<BigNumberish>,
    _minStakeAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  stakeInfo(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      start: BigNumber
      end: BigNumber
      duration: BigNumber
      stakeAmount: BigNumber
      totalSupply: BigNumber
      totalClaimed: BigNumber
    }
  >

  stakeToken(
    _stakeAmount: PromiseOrValue<BigNumberish>,
    _poolAddress: PromiseOrValue<string>,
    _duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  stakingPoolExists(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  turnOnOffPool(
    _poolAddress: PromiseOrValue<string>,
    _status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    addStakingPoolReserves(
      _amount: PromiseOrValue<BigNumberish>,
      _stakingPoolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    addressStaked(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>

    claimRewards(
      _poolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    factor(overrides?: CallOverrides): Promise<BigNumber>

    getTotalRewards(
      _poolAddress: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    injectToken(overrides?: CallOverrides): Promise<string>

    maxDuration(overrides?: CallOverrides): Promise<BigNumber>

    month(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<string>

    pause(overrides?: CallOverrides): Promise<void>

    paused(overrides?: CallOverrides): Promise<boolean>

    poolInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, BigNumber, BigNumber, BigNumber] & {
        interestRate: BigNumber
        totalStakers: BigNumber
        isActive: boolean
        poolReserves: BigNumber
        minReserve: BigNumber
        minStakeAmount: BigNumber
      }
    >

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    setMaxDuration(
      _maxDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    setStakingPool(
      _poolAddress: PromiseOrValue<string>,
      _interesRate: PromiseOrValue<BigNumberish>,
      _initialDeposit: PromiseOrValue<BigNumberish>,
      _minReserve: PromiseOrValue<BigNumberish>,
      _minStakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    stakeInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        start: BigNumber
        end: BigNumber
        duration: BigNumber
        stakeAmount: BigNumber
        totalSupply: BigNumber
        totalClaimed: BigNumber
      }
    >

    stakeToken(
      _stakeAmount: PromiseOrValue<BigNumberish>,
      _poolAddress: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    stakingPoolExists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    turnOnOffPool(
      _poolAddress: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>

    unpause(overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'LogClaimRewards(address,uint256,address)'(
      _from?: PromiseOrValue<string> | null,
      _tokensClaimed?: null,
      _poolAddress?: null
    ): LogClaimRewardsEventFilter
    LogClaimRewards(
      _from?: PromiseOrValue<string> | null,
      _tokensClaimed?: null,
      _poolAddress?: null
    ): LogClaimRewardsEventFilter

    'LogStakeToken(address,uint256,address)'(
      _from?: PromiseOrValue<string> | null,
      _amountStaked?: null,
      _poolAddress?: null
    ): LogStakeTokenEventFilter
    LogStakeToken(
      _from?: PromiseOrValue<string> | null,
      _amountStaked?: null,
      _poolAddress?: null
    ): LogStakeTokenEventFilter

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter

    'Paused(address)'(account?: null): PausedEventFilter
    Paused(account?: null): PausedEventFilter

    'Unpaused(address)'(account?: null): UnpausedEventFilter
    Unpaused(account?: null): UnpausedEventFilter
  }

  estimateGas: {
    addStakingPoolReserves(
      _amount: PromiseOrValue<BigNumberish>,
      _stakingPoolAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    addressStaked(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    claimRewards(
      _poolAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    factor(overrides?: CallOverrides): Promise<BigNumber>

    getTotalRewards(
      _poolAddress: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    injectToken(overrides?: CallOverrides): Promise<BigNumber>

    maxDuration(overrides?: CallOverrides): Promise<BigNumber>

    month(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    poolInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setMaxDuration(
      _maxDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setStakingPool(
      _poolAddress: PromiseOrValue<string>,
      _interesRate: PromiseOrValue<BigNumberish>,
      _initialDeposit: PromiseOrValue<BigNumberish>,
      _minReserve: PromiseOrValue<BigNumberish>,
      _minStakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    stakeInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    stakeToken(
      _stakeAmount: PromiseOrValue<BigNumberish>,
      _poolAddress: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    stakingPoolExists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    turnOnOffPool(
      _poolAddress: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    addStakingPoolReserves(
      _amount: PromiseOrValue<BigNumberish>,
      _stakingPoolAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    addressStaked(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    claimRewards(
      _poolAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    factor(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getTotalRewards(
      _poolAddress: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    injectToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

    maxDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>

    month(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    poolInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setMaxDuration(
      _maxDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setStakingPool(
      _poolAddress: PromiseOrValue<string>,
      _interesRate: PromiseOrValue<BigNumberish>,
      _initialDeposit: PromiseOrValue<BigNumberish>,
      _minReserve: PromiseOrValue<BigNumberish>,
      _minStakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    stakeInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    stakeToken(
      _stakeAmount: PromiseOrValue<BigNumberish>,
      _poolAddress: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    stakingPoolExists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    turnOnOffPool(
      _poolAddress: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
